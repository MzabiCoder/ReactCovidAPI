{"version":3,"sources":["components/Spinner.js","components/Cards/Cards.js","api/index.js","components/Charts/Charts.js","components/CountryPicker/CountryPicker.js","App.js","index.js","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["Spinner","className","style","src","alt","width","height","display","justifyContent","alignItems","Cards","Data","loading","confirmed","recovered","deaths","lastUpdate","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","newURL","axios","data","fetchDaily","get","map","dailyDate","total","date","reportDate","exportCountry","countries","val","name","Charts","Country","useState","Daily","setDaily","useEffect","fetch","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","title","text","styles","CountryPicker","changeCountry","setCountries","setLoading","fetchCountries","FormControl","formControl","NativeSelect","onChange","e","target","count","i","key","App","setData","setCountry","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a04ad66f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <div className=\"spinner\" style={style}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRQnSWvw_HRxjdvk6ZPrQtHaBy7lyFZgL_0ag&usqp=CAU\" alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst style = {\r\n    width: '100%',\r\n    height: '100vh',\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    alignItems:'center',\r\n}\r\n","import React from 'react'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CountUp from 'react-countup'\r\nimport Spinner from '../Spinner'\r\nimport cx from 'classnames'\r\n import styles from 'classnames'\r\n\r\nconst Cards = ({Data,loading}) => {\r\n    if (loading) {\r\n       return <Spinner/>\r\n    }\r\n    if (Data !== null) {\r\n        const {confirmed,recovered,deaths,lastUpdate}=Data\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <Grid container spacing={3} justify=\"center\">\r\n                  \r\n        <Grid item component={Card} xs={12} md={3} className=\"card infected\">\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>   Infected</Typography>   \r\n                            <Typography variant=\"h5\">\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={confirmed.value}\r\n                                    duration={2.5}\r\n                                    separator=\",\"\r\n                                />\r\n                            </Typography> \r\n                            <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                            <Typography variant=\"body2\">Number od active cases COVID</Typography> \r\n                        </CardContent>      \r\n                    </Grid> \r\n                    <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>   \r\n                            <Typography variant=\"h5\"><CountUp\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                            /></Typography> \r\n                            <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n\r\n                             <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography> \r\n                        </CardContent>      \r\n                    </Grid> \r\n                    <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>   \r\n                            <Typography variant=\"h5\"><CountUp\r\n                            start={0}\r\n                            end={deaths.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                            /></Typography> \r\n                            <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n\r\n                             <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography> \r\n                        </CardContent>      \r\n                    </Grid> \r\n                    </Grid>     \r\n            </div>\r\n        )\r\n     }\r\n       \r\n    \r\n    \r\n}\r\nexport default Cards","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\n export const fetchData = async (country) => {\r\n     try {\r\n        let newURL=url \r\n         if (country) {\r\n             newURL = `${url}/countries/${country}`\r\n         }  \r\n         const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios(newURL)\r\n         //console.log(`confirmed :${confirmed.value} recovered:${recovered.value} deaths:${deaths.value}`,lastUpdate);\r\n        return {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }\r\n     } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDaily = async () => {\r\n    \r\n     try {\r\n         const { data } = await axios.get(`${url}/daily`)\r\n         \r\n        return data.map((dailyDate) => ({\r\n                 confirmed: dailyDate.confirmed.total,\r\n                 deaths: dailyDate.deaths.total,\r\n                 date:dailyDate.reportDate,\r\n                     \r\n        }))\r\n        \r\n     \r\n     } catch (error) {\r\n         \r\n     }\r\n}\r\n\r\nexport const exportCountry = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n      return countries.map(val=>val.name)\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n ","import React, { useState, useEffect } from 'react';\r\nimport { fetchDaily } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n import styles from './Charts.module.css'\r\n\r\nconst Charts = ({Data,Country}) => {\r\n    const [Daily,setDaily]=useState([])\r\n  \r\n   useEffect(() => {\r\n     const fetch = async () => {\r\n        setDaily(await fetchDaily())\r\n          \r\n       } \r\n       fetch()\r\n     \r\n   },[])\r\n   \r\n    const lineChart = (\r\n        Daily.length && Daily[0] ?(\r\n        <Line\r\n            data={{\r\n                labels: Daily.map(({date})=>date),\r\n                    datasets: [{\r\n                        data: Daily.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill:true\r\n                    }, {\r\n                        data: Daily.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor:'rgba(255,0,0,.5)',\r\n                        fill:true\r\n                }]\r\n        }}\r\n        />):null\r\n    \r\n    )\r\n  \r\n    // const barChar = (\r\n       \r\n    //     Data!==null && Data.confirmed  ?(\r\n           \r\n    //         <Bar\r\n    //          data={{\r\n    //           labels:['Infected','Recovered','Deaths'],\r\n    //           datasets:[{\r\n    //               label:'People',\r\n    //               backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)']\r\n    //           }],\r\n    //           data:[Data.confirmed.value,Data.recovered.value,Data.deaths.value]\r\n    //          }}\r\n    //          options={{\r\n    //              legend:{display:false},\r\n    //              title:{display:true,text:`Current state in ${Country}`}\r\n    //          }}\r\n    //         />\r\n    //     ):null\r\n    // )\r\n\r\n    const barChar = (\r\n        Data && Data.confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                  data: [Data.confirmed.value, Data.recovered.value, Data.deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${Country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n     \r\n    return (\r\n        <div className={styles.container}>\r\n        {Country ?  barChar : lineChart}\r\n\r\n         </div>\r\n    )\r\n}\r\nexport default  Charts"," import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css'\r\nimport { exportCountry } from '../../api'\r\n\r\n\r\nconst CountryPicker = ({changeCountry}) => {\r\n    const [countries,setCountries]=useState([])\r\n    const [loading,setLoading]=useState(true)\r\n    useEffect(() => {\r\n \r\n        const fetchCountries = async () => {\r\n            setCountries(await exportCountry())\r\n            setLoading(!loading)\r\n           \r\n        }\r\n      \r\n        fetchCountries()\r\n         \r\n    }, [setCountries])\r\n  \r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect  onChange={(e)=>changeCountry(e.target.value)}>\r\n        <option value=\"global\">Global</option>\r\n       {!loading && countries.map((count, i)=><option value={count} key={i}>{count}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker","\n\nimport React,{useState,useEffect}  from 'react';\n //import InfiniteScroll from 'react-infinite-scroll-component'\nimport { Cards, CountryPicker, Charts } from './components'\nimport { fetchData } from './api'\nimport styles from './App.module.css'\n\nconst App = () => {\n   const [Data,setData]=useState(null)\n    const [loading,setLoading]=useState(true)\n    const [Country,setCountry]=useState('')\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchData()\n       setData(data)\n      setLoading(false)\n       \n      \n   } \n    fetch()\n    \n  }, [])\n  \n  const changeCountry = async (country) => {\n    setData(await fetchData(country))\n    setCountry(country)\n    setLoading(false)\n  }\n  return (\n     <div className={styles.container}>\n      <Cards loading={loading} Data={Data} />\n      <CountryPicker changeCountry={changeCountry} />\n      <Charts Data={Data} loading={loading} Country={Country} />\n      </div>\n  );\n\n }\n \n\nexport default App;\n\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__VXuZe\",\"formControl\":\"Charts_formControl__1LAPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__317OO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1q9LX\"};"],"sourceRoot":""}